# LyricManager Settings File

lyric_fetching:
  # Supported sources:
  # - LocalFile
  # - Pypi_LyricsGenius    (Unreliable)
  # - Pypi_LyricsExtractor (Recommended)
  # - Website_LyricsDotOvh (Not implemented)
  # If left empty, LyricManager will assume local files are available?
  #
  # Order determines preference. 
  sources:
    - LocalFile
    - Pypi_LyricsExtractor

  # Genius API token. Required if using Pypi_LyricsGenius as source.
  genius_token:

  # Google Custom Search tokens. Required if using Pypi_LyricsExtractor as source.
  google_custom_search_api_key:
  google_custom_search_engine_id:


lyric_alignment:
  # Supported methods:
  # method: Disabled                  (To just fetch lyrics)
  # method: NUSAutoLyrixAlignOffline
  # method: NUSAutoLyrixAlignOnline   (Not implemented)
  method: Disabled

  # Path to where NUSAutoLyrixAlign is installed in Offline mode
  NUSAutoLyrixAlign_path:

  # Path to where LyricManager temporarily copies files for NUSAutoLyrixAlignOffline to parse
  # Note, NUSAutoLyrixAlignOffline does *not* function properly with a path containing spaces (' ')
  NUSAutoLyrixAlign_working_directory: ~/nusautolyrixalign_working_directory

data:
  input:

    # Folders with music for LyricManager to process
    paths_to_process:
      - ~/path/to/your/music
      - ~/another/path/to/music

    # How LyricManager should determine an audio files artist and songname
    # artist_song_name_source: FileName - LyricManager expects songs to adhere to this naming convention "Artist - Song Name.mp3".
    # artist_song_name_source: FileTags - LyricManager will derive the Artist and Song Name information from the audio file tags if possible.
    artist_song_name_source: FileName

    # Any folders added here will be excluded from processing. Mainly useful for recursive parsing.
    folders_to_exclude:

    # If true, will parse sub-folders located in all folders in paths_to_process
    recursively_process_paths: False

  output:

    # LyricManager generates an abundance of files during processing.
    # A working directory is required and is - by default - located in a sub-folder where LyricManager is located.
    path_to_working_directory: ./WorkingDirectory

    # When processing is completed, LyricManager writes a report to disk to track changes over time.
    path_to_reports: ./Reports

    # The 'final' lyric alignment file (with extension .aligned_lyrics) LyricManager produces, can be copied alongside
    # the original audio file, into a wholly separate directory, or not copied anywhere at all.
    # aligned_lyrics_copy_destination: NextToAudioFile
    # aligned_lyrics_copy_destination: SeparateDirectory
    aligned_lyrics_file_copy_mode: Disabled

    path_to_output_aligned_lyrics:

    # LyricManager supports two ways to output aligned lyrics:
    #   - Compact:  Few spaces, few line breaks, no tabs. Intended for low disk space consumtion.
    #   - Readable: Indentation, lots of spaces and line breaks. Intended for readability and debugging.
    #aligned_lyrics_output_mode: Compact
    aligned_lyrics_output_mode: Readable

    overwrite_existing_generated_files: True
    
  # TODO: In a future version, it may be worth-while to provide a series of processing settings to determine whether
  # new sources of information should be fetched/generated, or whether to re-use existing ones.
  # For now, LyricManager applies very rudamentary logic to attempt to highlight files which are likely flawed, and
  # should be removed by the user to re-acquire or re-generate them.
